package hello;

import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Stream;

import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.server.ServerResponse;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import static org.springframework.http.MediaType.APPLICATION_JSON;
import static org.springframework.web.reactive.function.BodyInserters.fromObject;

@RestController
public class GreetingController {

    private static final String template = "Hello, %s!";
    private final AtomicLong counter = new AtomicLong();

    @RequestMapping("/greeting")
    public Greeting greeting(@RequestParam(value="name", defaultValue="World") String name) {
        return new Greeting(counter.incrementAndGet(),
                            String.format(template, name));
    }

    // 第一个测试程序
    @RequestMapping("query")
    public Mono<String> getStudent(@RequestParam(name = "id")String id) {
        return Mono.fromCallable(() -> {
            return "测试";
        });
    }

    // 测试用flux
    @RequestMapping("get")
    public Flux<String> getFluxObject() {
        return Flux.fromStream(Stream.of("123", "456"));
    }

    // 测试通过异步返回response
    // 这个方法没测试成功，后续验证，一般情况下使用上面的代码足够了
//    public Mono<ServerResponse> getStudentList() {
//        Mono<ServerResponse> notFound = ServerResponse.notFound().build();
//        Mono<String> studentsMono = Mono.fromCallable(() -> {
//           return "哈哈哈";
//        });
//        return studentsMono
//                .then(person -> ServerResponse.ok().contentType(APPLICATION_JSON).body(fromObject(person)))
//                .defaultIfEmpty(notFound);
//    }

}
